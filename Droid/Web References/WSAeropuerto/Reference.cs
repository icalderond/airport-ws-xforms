//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace airports_country.Droid.WSAeropuerto {
    using System.Diagnostics;
    using System;
    using System.Xml.Serialization;
    using System.ComponentModel;
    using System.Web.Services.Protocols;
    using System.Web.Services;
    
    
    /// CodeRemarks
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "7.1.0.583")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Web.Services.WebServiceBindingAttribute(Name="airportSoap", Namespace="http://www.webserviceX.NET")]
    public partial class airport : System.Web.Services.Protocols.SoapHttpClientProtocol {
        
        private System.Threading.SendOrPostCallback getAirportInformationByISOCountryCodeOperationCompleted;
        
        private System.Threading.SendOrPostCallback getAirportInformationByCityOrAirportNameOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetAirportInformationByCountryOperationCompleted;
        
        private System.Threading.SendOrPostCallback getAirportInformationByAirportCodeOperationCompleted;
        
        /// CodeRemarks
        public airport() {
            this.Url = "http://www.webservicex.net/airport.asmx";
        }
        
        public airport(string url) {
            this.Url = url;
        }
        
        /// CodeRemarks
        public event getAirportInformationByISOCountryCodeCompletedEventHandler getAirportInformationByISOCountryCodeCompleted;
        
        /// CodeRemarks
        public event getAirportInformationByCityOrAirportNameCompletedEventHandler getAirportInformationByCityOrAirportNameCompleted;
        
        /// CodeRemarks
        public event GetAirportInformationByCountryCompletedEventHandler GetAirportInformationByCountryCompleted;
        
        /// CodeRemarks
        public event getAirportInformationByAirportCodeCompletedEventHandler getAirportInformationByAirportCodeCompleted;
        
        /// CodeRemarks
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.webserviceX.NET/getAirportInformationByISOCountryCode", RequestNamespace="http://www.webserviceX.NET", ResponseNamespace="http://www.webserviceX.NET", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string getAirportInformationByISOCountryCode(string CountryAbbrviation) {
            object[] results = this.Invoke("getAirportInformationByISOCountryCode", new object[] {
                        CountryAbbrviation});
            return ((string)(results[0]));
        }
        
        /// CodeRemarks
        public void getAirportInformationByISOCountryCodeAsync(string CountryAbbrviation) {
            this.getAirportInformationByISOCountryCodeAsync(CountryAbbrviation, null);
        }
        
        /// CodeRemarks
        public void getAirportInformationByISOCountryCodeAsync(string CountryAbbrviation, object userState) {
            if ((this.getAirportInformationByISOCountryCodeOperationCompleted == null)) {
                this.getAirportInformationByISOCountryCodeOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetAirportInformationByISOCountryCodeOperationCompleted);
            }
            this.InvokeAsync("getAirportInformationByISOCountryCode", new object[] {
                        CountryAbbrviation}, this.getAirportInformationByISOCountryCodeOperationCompleted, userState);
        }
        
        private void OngetAirportInformationByISOCountryCodeOperationCompleted(object arg) {
            if ((this.getAirportInformationByISOCountryCodeCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getAirportInformationByISOCountryCodeCompleted(this, new getAirportInformationByISOCountryCodeCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// CodeRemarks
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.webserviceX.NET/getAirportInformationByCityOrAirportName", RequestNamespace="http://www.webserviceX.NET", ResponseNamespace="http://www.webserviceX.NET", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string getAirportInformationByCityOrAirportName(string cityOrAirportName) {
            object[] results = this.Invoke("getAirportInformationByCityOrAirportName", new object[] {
                        cityOrAirportName});
            return ((string)(results[0]));
        }
        
        /// CodeRemarks
        public void getAirportInformationByCityOrAirportNameAsync(string cityOrAirportName) {
            this.getAirportInformationByCityOrAirportNameAsync(cityOrAirportName, null);
        }
        
        /// CodeRemarks
        public void getAirportInformationByCityOrAirportNameAsync(string cityOrAirportName, object userState) {
            if ((this.getAirportInformationByCityOrAirportNameOperationCompleted == null)) {
                this.getAirportInformationByCityOrAirportNameOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetAirportInformationByCityOrAirportNameOperationCompleted);
            }
            this.InvokeAsync("getAirportInformationByCityOrAirportName", new object[] {
                        cityOrAirportName}, this.getAirportInformationByCityOrAirportNameOperationCompleted, userState);
        }
        
        private void OngetAirportInformationByCityOrAirportNameOperationCompleted(object arg) {
            if ((this.getAirportInformationByCityOrAirportNameCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getAirportInformationByCityOrAirportNameCompleted(this, new getAirportInformationByCityOrAirportNameCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// CodeRemarks
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.webserviceX.NET/GetAirportInformationByCountry", RequestNamespace="http://www.webserviceX.NET", ResponseNamespace="http://www.webserviceX.NET", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetAirportInformationByCountry(string country) {
            object[] results = this.Invoke("GetAirportInformationByCountry", new object[] {
                        country});
            return ((string)(results[0]));
        }
        
        /// CodeRemarks
        public void GetAirportInformationByCountryAsync(string country) {
            this.GetAirportInformationByCountryAsync(country, null);
        }
        
        /// CodeRemarks
        public void GetAirportInformationByCountryAsync(string country, object userState) {
            if ((this.GetAirportInformationByCountryOperationCompleted == null)) {
                this.GetAirportInformationByCountryOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetAirportInformationByCountryOperationCompleted);
            }
            this.InvokeAsync("GetAirportInformationByCountry", new object[] {
                        country}, this.GetAirportInformationByCountryOperationCompleted, userState);
        }
        
        private void OnGetAirportInformationByCountryOperationCompleted(object arg) {
            if ((this.GetAirportInformationByCountryCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetAirportInformationByCountryCompleted(this, new GetAirportInformationByCountryCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// CodeRemarks
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.webserviceX.NET/getAirportInformationByAirportCode", RequestNamespace="http://www.webserviceX.NET", ResponseNamespace="http://www.webserviceX.NET", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string getAirportInformationByAirportCode(string airportCode) {
            object[] results = this.Invoke("getAirportInformationByAirportCode", new object[] {
                        airportCode});
            return ((string)(results[0]));
        }
        
        /// CodeRemarks
        public void getAirportInformationByAirportCodeAsync(string airportCode) {
            this.getAirportInformationByAirportCodeAsync(airportCode, null);
        }
        
        /// CodeRemarks
        public void getAirportInformationByAirportCodeAsync(string airportCode, object userState) {
            if ((this.getAirportInformationByAirportCodeOperationCompleted == null)) {
                this.getAirportInformationByAirportCodeOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetAirportInformationByAirportCodeOperationCompleted);
            }
            this.InvokeAsync("getAirportInformationByAirportCode", new object[] {
                        airportCode}, this.getAirportInformationByAirportCodeOperationCompleted, userState);
        }
        
        private void OngetAirportInformationByAirportCodeOperationCompleted(object arg) {
            if ((this.getAirportInformationByAirportCodeCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getAirportInformationByAirportCodeCompleted(this, new getAirportInformationByAirportCodeCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// CodeRemarks
        public new void CancelAsync(object userState) {
            base.CancelAsync(userState);
        }
    }
    
    /// CodeRemarks
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "7.1.0.583")]
    public delegate void getAirportInformationByISOCountryCodeCompletedEventHandler(object sender, getAirportInformationByISOCountryCodeCompletedEventArgs e);
    
    /// CodeRemarks
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "7.1.0.583")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getAirportInformationByISOCountryCodeCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getAirportInformationByISOCountryCodeCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// CodeRemarks
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// CodeRemarks
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "7.1.0.583")]
    public delegate void getAirportInformationByCityOrAirportNameCompletedEventHandler(object sender, getAirportInformationByCityOrAirportNameCompletedEventArgs e);
    
    /// CodeRemarks
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "7.1.0.583")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getAirportInformationByCityOrAirportNameCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getAirportInformationByCityOrAirportNameCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// CodeRemarks
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// CodeRemarks
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "7.1.0.583")]
    public delegate void GetAirportInformationByCountryCompletedEventHandler(object sender, GetAirportInformationByCountryCompletedEventArgs e);
    
    /// CodeRemarks
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "7.1.0.583")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetAirportInformationByCountryCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetAirportInformationByCountryCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// CodeRemarks
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// CodeRemarks
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "7.1.0.583")]
    public delegate void getAirportInformationByAirportCodeCompletedEventHandler(object sender, getAirportInformationByAirportCodeCompletedEventArgs e);
    
    /// CodeRemarks
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "7.1.0.583")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getAirportInformationByAirportCodeCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getAirportInformationByAirportCodeCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// CodeRemarks
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
}
